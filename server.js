import express from "express";
import cors from "cors";
import { readFile, writeFile, mkdir, access } from "fs/promises";
import path from "path";
import { randomUUID } from "crypto";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware - Simple CORS for development
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
  res.header(
    "Access-Control-Allow-Headers",
    "Origin, X-Requested-With, Content-Type, Accept, Authorization",
  );

  if (req.method === "OPTIONS") {
    res.sendStatus(200);
  } else {
    next();
  }
});

app.use(express.json({ limit: "10mb" }));

// Serve static files from output directory
app.use("/downloads", express.static("output"));

// API endpoint to generate Express code
app.post("/api/generate", async (req, res) => {
  try {
    const { endpoints } = req.body;

    if (!endpoints || !Array.isArray(endpoints)) {
      return res.status(400).json({ error: "Invalid endpoints data" });
    }

    // Read the template
    const templatePath = path.join(__dirname, "templates", "server.js");

    // Check if template exists
    try {
      await access(templatePath);
    } catch (error) {
      throw new Error(`Template file not found: ${templatePath}`);
    }

    const template = await readFile(templatePath, "utf-8");

    // Generate endpoint code
    const endpointCode = endpoints
      .map((endpoint) => {
        const { method, path: endpointPath, description, headers } = endpoint;

        // Convert custom headers to header setting code
        const headerCode =
          headers && headers.length > 0
            ? headers
                .map(
                  (header) =>
                    `  res.setHeader("${header.key}", "${header.value}");`,
                )
                .join("\n")
            : "";

        // Generate a basic response structure
        const responseBody = {
          message: `${method} ${endpointPath} endpoint`,
          description: description || `${method} endpoint for ${endpointPath}`,
          timestamp: new Date().toISOString(),
        };

        return `
// ${description || `${method} ${endpointPath}`}
app.${method.toLowerCase()}("${endpointPath}", (req, res) => {
${headerCode}
  res.status(200).json(${JSON.stringify(responseBody, null, 4)});
});`;
      })
      .join("\n");

    // Replace placeholder in template
    const generatedCode = template.replace("// {{ENDPOINTS}}", endpointCode);

    // Create output directory if it doesn't exist
    const outputDir = path.join(__dirname, "output", "generated");
    await mkdir(outputDir, { recursive: true });

    // Generate unique filename
    const filename = `express-server-${Date.now()}.js`;
    const filePath = path.join(outputDir, filename);

    // Write the generated file
    await writeFile(filePath, generatedCode);

    // Also generate package.json
    const packageJson = {
      name: "generated-express-server",
      version: "1.0.0",
      description: "Generated Express server from EasyBack",
      main: "server.js",
      type: "module",
      scripts: {
        start: "node server.js",
        dev: "node --watch server.js",
      },
      dependencies: {
        express: "^4.18.2",
      },
      keywords: ["express", "api", "easyback"],
      author: "EasyBack Generator",
    };

    const packagePath = path.join(outputDir, "package.json");
    await writeFile(packagePath, JSON.stringify(packageJson, null, 2));

    // Create README
    const readme = `# Generated Express Server

This Express server was generated by EasyBack.

## Installation

\`\`\`bash
npm install
\`\`\`

## Running the server

\`\`\`bash
npm start
\`\`\`

For development with auto-restart:

\`\`\`bash
npm run dev
\`\`\`

## Generated Endpoints

${endpoints.map((endpoint) => `- **${endpoint.method}** \`${endpoint.path}\`${endpoint.description ? ` - ${endpoint.description}` : ""}`).join("\n")}

## Headers

${
  endpoints.some((e) => e.headers?.length > 0)
    ? endpoints
        .filter((e) => e.headers?.length > 0)
        .map(
          (e) =>
            `### ${e.method} ${e.path}\n${e.headers.map((h) => `- \`${h.key}: ${h.value}\``).join("\n")}`,
        )
        .join("\n\n")
    : "No custom headers configured."
}
`;

    const readmePath = path.join(outputDir, "README.md");
    await writeFile(readmePath, readme);

    res.json({
      success: true,
      filename,
      downloadUrl: `/downloads/generated/${filename}`,
      packageUrl: `/downloads/generated/package.json`,
      readmeUrl: `/downloads/generated/README.md`,
      generatedFiles: [filename, "package.json", "README.md"],
    });
  } catch (error) {
    console.error("Error generating code:", error);
    res.status(500).json({
      error: "Failed to generate code",
      details: error.message,
    });
  }
});

// Health check endpoint
app.get("/api/health", (req, res) => {
  res.json({ status: "OK", timestamp: new Date().toISOString() });
});

// Test endpoint for CORS debugging
app.get("/api/test", (req, res) => {
  res.json({
    message: "CORS test successful",
    origin: req.headers.origin,
    method: req.method,
    timestamp: new Date().toISOString(),
  });
});

app.post("/api/test", (req, res) => {
  res.json({
    message: "POST CORS test successful",
    body: req.body,
    origin: req.headers.origin,
    timestamp: new Date().toISOString(),
  });
});

app
  .listen(PORT, () => {
    console.log(
      `‚úÖ EasyBack Generator Server running on http://localhost:${PORT}`,
    );
    console.log(`üåê Frontend should be served on http://localhost:5173`);
    console.log(
      `üìÅ Generated files will be available at http://localhost:${PORT}/downloads`,
    );
    console.log(`üìã Template directory: ${path.join(__dirname, "templates")}`);
    console.log(`üìÇ Output directory: ${path.join(__dirname, "output")}`);
  })
  .on("error", (err) => {
    if (err.code === "EADDRINUSE") {
      console.error(`‚ùå Port ${PORT} is already in use. Try a different port.`);
      process.exit(1);
    } else {
      console.error("‚ùå Server error:", err);
      process.exit(1);
    }
  });
